import os
import json
import re

from dotenv import load_dotenv

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.fsm.context import FSMContext

from app.form_app.fsm import Form
from app.form_app import keyboards as k
from keyboards import client as kc
from app.form_app.data import requests as r

from config import bot

router = Router()


# –≠—Ç–æ—Ç —Ñ–∞–π–ª –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞
#
# –ë–µ–∑ –Ω–∞–¥–æ–±–Ω–æ—Å—Ç–∏ –Ω–µ —Ç—Ä–æ–≥–∞—Ç—å!
#
# –í —Å–∞–º–æ–º –Ω–∏–∑—É —Ñ–∞–π–ª–∞ –æ–ø–∏—Å–∞–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–æ–∫ –Ω–∞–∑–∞–¥ –≤ –∫–∞–∂–¥–æ–º –ø—É–Ω–∫—Ç–µ
# –ú–æ–∂–µ—Ç –±—ã—Ç—å –º–Ω–æ–≥–æ –∫–æ—Å—Ç—ã–ª–µ–π, –Ω–æ –ø–æ–∫–∞ —á—Ç–æ –∏–Ω–∞—á–µ –Ω–µ –ø—Ä–∏–¥—É–º–∞–ª



# –ò–º–ø–æ—Ä—Ç—ã –Ω–∞–∑–≤–∞–Ω–∏–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π + –∞–π–¥–∏ –∞–¥–º–∏–Ω–∞

load_dotenv()
admin = os.getenv("admin")
photo_nickname = os.getenv("photo_nickname")
photo_rules = os.getenv("photo_rules")
photo_role = os.getenv("photo_role")
photo_stack = os.getenv("photo_stack1")
photo_preferences = os.getenv("photo_preferences")
photo_portfolie = os.getenv("photo_portfolie")
photo_conf = os.getenv("photo_conf")





# ----------------------------------------------



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ä–æ–ª–µ–π –∏ —Ä–∞–∑–º–µ—Ä–æ–≤
def translate_role(role):
    translations = {
        'designer': '–î–∏–∑–∞–π–Ω–µ—Ä',
        'developer': '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫',
        'manager': '–ú–µ–Ω–µ–¥–∂–µ—Ä'
    }
    return translations.get(role, role)



def translate_sizes(sizes):
    translations = {
        'large': '–ë–æ–ª—å—à–∏–µ',
        'small': '–ú–∞–ª—ã–µ',
        'medium': '–°—Ä–µ–¥–Ω–∏–µ'
    }
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ –∫ –∫–∞–∂–¥–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É —Å–ø–∏—Å–∫–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    return [translations.get(size, size) for size in sizes]



# ----------------------------------------



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
@router.callback_query(kc.Menu_callback.filter(F.menu == 'start'))
async def set_name(call: CallbackQuery, callback_data: k.Menu_callback, state: FSMContext):

    await call.message.delete()

    text = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –í–∞—à –Ω–∏–∫–Ω–µ–π–º (—Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã, –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ü–∏—Ñ—Ä): '
    photo = FSInputFile(f'photos/{photo_nickname}')

    await call.message.answer_photo(photo=photo, caption=text)
    await state.set_state(Form.nickname)



@router.callback_query(k.Menu_callback.filter(F.menu == 'change'), Form.conf)
async def accept_rules_handler(call: CallbackQuery, callback_data: k.Menu_callback, state: FSMContext):

    message_id = call.message.message_id
    chat_id = call.from_user.id

    await bot.delete_message(chat_id=chat_id, message_id=message_id)
    
    text = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –í–∞—à –Ω–∏–∫–Ω–µ–π–º (—Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã, –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ü–∏—Ñ—Ä): '
    photo = FSInputFile(f'photos/{photo_nickname}')

    await call.message.answer_photo(photo=photo, caption=text)
    await state.set_state(Form.nickname)



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –ø–æ—Å–ª–µ –Ω–∏–∫–∞
@router.message(Form.nickname)
async def rules_state(message: Message, state: FSMContext):
    chat_id = message.from_user.id
    message_id = message.message_id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –Ω–∏–∫–Ω–µ–π–º —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã
    nickname = message.text
    if not re.match("^[A-Za-z]+$", nickname):
        error_text = "<b>‚ùå –ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã –±–µ–∑ —Ü–∏—Ñ—Ä –∏ —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –∑–∞–Ω–æ–≤–æ.</b>"
        await message.reply(error_text)
        return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –Ω–∏–∫–Ω–µ–π–º –∑–∞–Ω–æ–≤–æ

    # –ï—Å–ª–∏ –Ω–∏–∫–Ω–µ–π–º –≤–∞–ª–∏–¥–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    await bot.delete_message(chat_id=chat_id, message_id=message_id)
    await bot.delete_message(chat_id=chat_id, message_id=message_id-1)

    await state.update_data(name=nickname)

    text = """
<b>üõ° –ü—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –≤ —Å—Ç—É–¥–∏–∏, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω—ã —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏ —Å–æ–≥–ª–∞—Å–Ω—ã —Å –Ω–∏–º–∏.</b>
"""
    kb = k.rules_kb()
    photo = FSInputFile(f'photos/{photo_rules}')

    await message.answer_photo(photo=photo, caption=text, reply_markup=kb)

    await state.set_state(Form.rules)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–∏–Ω—è—Ç—å –ø—Ä–∞–≤–∏–ª–∞"
@router.callback_query(k.Menu_callback.filter(F.menu == 'accept_rules'))
async def accept_rules_callback(call: CallbackQuery, state: FSMContext):

    await call.message.delete()
    
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –í–∞—à—É —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é:"
    kb = k.role_kb()
    photo = FSInputFile(f'photos/{photo_role}')

    await call.message.answer_photo(photo=photo, caption=text, reply_markup=kb)

    await state.set_state(Form.role)



# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
# @router.callback_query(k.Menu_callback.filter(F.menu == 'next'), Form.rules)
# async def continue_callback(call: CallbackQuery, state: FSMContext):

#     data = await state.get_data()
#     accepted = data.get('accepted', None)

#     await call.message.delete()


#     if not accepted:
#         accepted = data['accepted']
#         text = "–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞!"
#         await call.answer(text=text, show_alert=True)
#         return
    
#     text = "–í—ã–±–µ—Ä–∏—Ç–µ –í–∞—à—É —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é:"
#     kb = k.role_kb()
#     photo = FSInputFile(f'photos/{photo_role}')

#     await call.message.answer_photo(photo=photo, caption=text, reply_markup=kb)

#     await state.set_state(Form.role)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏
@router.callback_query(k.Menu_callback.filter(F.menu == 'role'), Form.role)
async def set_role(call: CallbackQuery, callback_data: k.Menu_callback, state: FSMContext):

    await call.message.delete()

    role = callback_data.data
    await state.update_data(role=role)
    
    if role == 'developer':
        text = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –í–∞—à —Å—Ç–µ–∫:'
        kb = k.stack_kb()
        await state.set_state(Form.stack)

    elif role == 'designer':
        text = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –í–∞—à —Å—Ç–µ–∫:'
        kb = k.stack_kb_designer()
        await state.set_state(Form.stack)

    elif role == 'manager':
        text = '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –∑–∞–∫–∞–∑–∞:'
        kb = k.order_size_kb()
        photo = photo_preferences
        await state.set_state(Form.preferences)

    photo = FSInputFile(f'photos/{photo_stack}')

    await call.message.answer_photo(photo=photo, caption=text, reply_markup=kb)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
@router.callback_query(k.Menu_callback.filter(F.menu == 'tech'), Form.stack)
async def select_technology(call: CallbackQuery, callback_data: k.Menu_callback, state: FSMContext):

    selected_tech = callback_data.data
    data = await state.get_data()
    selected_technologies = data.get("selected_technologies", [])
    role = data.get("role")

    if selected_tech in selected_technologies:
        selected_technologies.remove(selected_tech)
    else:
        selected_technologies.append(selected_tech)

    await state.update_data(selected_technologies=selected_technologies)

    if role == 'developer':
        kb = k.stack_kb(selected_technologies)
    elif role == 'designer':
        kb = k.stack_kb_designer(selected_technologies)
    else:
        kb = None

    if kb:
        await call.message.edit_reply_markup(reply_markup=kb)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
@router.callback_query(k.Menu_callback.filter(F.menu == 'next'), Form.stack)
async def continue_selection(call: CallbackQuery, state: FSMContext):

    # await call.message.delete()

    data = await state.get_data()
    st = data.get('selected_technologies', None)

    if not st:
        text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è!"
        await call.answer(text=text, show_alert=True)
        return
    
    await call.message.delete()

    text = '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–∫–∞–∑—ã:'
    kb = k.order_size_kb()
    photo = FSInputFile(f'photos/{photo_preferences}')

    await call.message.answer_photo(photo=photo, caption=text, reply_markup=kb)

    await state.set_state(Form.preferences)



@router.callback_query(k.Menu_callback.filter(F.menu == 'order_size'), Form.preferences)
async def handle_order_size(call: CallbackQuery, callback_data: k.Menu_callback, state: FSMContext):

    selected_size = callback_data.data
    data = await state.get_data()
    selected_sizes = data.get('selected_sizes', [])

    if selected_size in selected_sizes:
        selected_sizes.remove(selected_size)
    else:
        selected_sizes.append(selected_size)

    await state.update_data(selected_sizes=selected_sizes)


    kb = k.order_size_kb(selected_sizes)
    await call.message.edit_reply_markup(reply_markup=kb)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
@router.callback_query(k.Menu_callback.filter(F.menu == 'next'), Form.preferences)
async def continue_selection(call: CallbackQuery, state: FSMContext):


    data = await state.get_data()
    selected_sizes = data.get('selected_sizes', None)
    role = data.get('role')

    if not selected_sizes:
        text = '–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–∞–∑–º–µ—Ä –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è!'
        await call.answer(text=text, show_alert=True)
        return
    
    await call.message.delete()

    kb = k.cancel_kb()

    # print(role)
    if role in ('developer', 'manager'):

        # await call.message.delete()

        form_data = await state.get_data()
        name = form_data.get('name')
        role_tr = translate_role(role=role)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–µ–∫ –∏ —Ä–∞–∑–º–µ—Ä—ã –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ —Å—Ç—Ä–æ–∫–∏
        stack = form_data.get('selected_technologies', [])
        stack_list = ', '.join(stack)

        sizes = form_data.get('selected_sizes', [])
        sizes_list = translate_sizes(sizes=sizes)
        sizes_list = ', '.join(sizes_list)


        text = f'''<b>
–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞:

–ò–º—è: <code>{name}</code>
–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: <code>{role_tr}</code>
–°—Ç–µ–∫: <code>{stack_list}</code>
–†–∞–∑–º–µ—Ä—ã –ø—Ä–æ–µ–∫—Ç–æ–≤: <code>{sizes_list}</code></b>
'''

        kb = k.conf_kb()
        photo = FSInputFile(f'photos/{photo_conf}')

        await call.message.answer_photo(photo=photo, caption=text, reply_markup=kb)

        await state.set_state(Form.conf)

    else:

        text = '–£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ.'
        photo = FSInputFile(f'photos/{photo_portfolie}')
        kb = k.port_kb()

        await call.message.answer_photo(photo=photo, caption=text, reply_markup=kb)

        await state.set_state(Form.portfolie)



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
@router.message(Form.portfolie)
async def set_portfolio(message: Message, state: FSMContext):
    chat_id = message.from_user.id
    message_id = message.message_id

    await bot.delete_message(chat_id=chat_id, message_id=message_id)
    await bot.delete_message(chat_id=chat_id, message_id=message_id - 1)

    form_data = await state.get_data()
    name = form_data.get('name')
    role = form_data.get('role')
    role_tr = translate_role(role=role)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–µ–∫ –∏ —Ä–∞–∑–º–µ—Ä—ã –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ —Å—Ç—Ä–æ–∫–∏
    stack = form_data.get('selected_technologies', [])
    stack_list = ', '.join(stack)

    sizes = form_data.get('selected_sizes', [])
    sizes_list = translate_sizes(sizes=sizes)
    sizes_list = ', '.join(sizes_list)

    await state.update_data(portfolio=message.text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∫–µ—Ç–æ–π –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    text = f'''<b>
–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞:

–ò–º—è: <code>{name}</code>
–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: <code>{role_tr}</code>
–°—Ç–µ–∫: <code>{stack_list}</code>
–†–∞–∑–º–µ—Ä—ã –ø—Ä–æ–µ–∫—Ç–æ–≤: <code>{sizes_list}</code>
–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ: <code>{message.text}</code></b>
'''

    kb = k.conf_kb()
    photo = FSInputFile(f'photos/{photo_conf}')

    await message.answer_photo(photo=photo, caption=text, reply_markup=kb)

    await state.set_state(Form.conf)



@router.callback_query(k.Menu_callback.filter(F.menu == 'no'), Form.portfolie)
async def set_deadline(call: CallbackQuery, callback_data: k.Menu_callback, state: FSMContext):

    await call.message.delete()

    form_data = await state.get_data()
    name = form_data.get('name')
    role = form_data.get('role')
    role_tr = translate_role(role=role)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–µ–∫ –∏ —Ä–∞–∑–º–µ—Ä—ã –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ —Å—Ç—Ä–æ–∫–∏
    stack = form_data.get('selected_technologies', [])
    stack_list = ', '.join(stack)

    sizes = form_data.get('selected_sizes', [])
    sizes_list = translate_sizes(sizes=sizes)
    sizes_list = ', '.join(sizes_list)

    await state.update_data(portfolio='-')  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∫–µ—Ç–æ–π –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    text = f'''<b>
–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞:

–ò–º—è: <code>{name}</code>
–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: <code>{role_tr}</code>
–°—Ç–µ–∫: <code>{stack_list}</code>
–†–∞–∑–º–µ—Ä—ã –ø—Ä–æ–µ–∫—Ç–æ–≤: <code>{sizes_list}</code>
–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ: <code>-</code></b>
'''

    kb = k.conf_kb()
    photo = FSInputFile(f'photos/{photo_conf}')

    await call.message.answer_photo(photo=photo, caption=text, reply_markup=kb)

    await state.set_state(Form.conf)





@router.callback_query(k.Menu_callback.filter(F.menu == 'confirmation'), Form.conf)
async def confirm_request(call: CallbackQuery, callback_data: k.Menu_callback, state: FSMContext):
    
    await call.message.delete()

    form_data = await state.get_data()
    name = form_data.get('name')
    role = form_data.get('role')
    role_tr = translate_role(role=role)
    portfolio = form_data.get('portfolio', None)

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–µ–∫ –∏ —Ä–∞–∑–º–µ—Ä—ã –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ —Å—Ç—Ä–æ–∫–∏
    stack = form_data.get('selected_technologies', [])
    stack_list = ', '.join(stack)

    sizes = form_data.get('selected_sizes', [])
    sizes_list = translate_sizes(sizes=sizes)
    sizes_list = ', '.join(sizes_list)

    user_id = call.from_user.id
    username = call.from_user.username

    if username:
        username = f'@{username} | '
    else:
        username = ''


    text = f'''<b>
–ê–Ω–∫–µ—Ç–∞ {username}<code>{user_id}</code>:

–ò–º—è: <code>{name}</code>
–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: <code>{role_tr}</code>
–°—Ç–µ–∫: <code>{stack_list}</code>
–†–∞–∑–º–µ—Ä—ã –ø—Ä–æ–µ–∫—Ç–æ–≤: <code>{sizes_list}</code></b>
'''
    if portfolio:
        portfolio = f'\n<b>–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ: {portfolio}</b>'
        text = text + portfolio
    else:
        pass

    data = {
        'user_id': user_id,
        'name': name,
        'specialty': role,
        'stack': stack,
        'preferred_orders': sizes
    }

    data['stack'] = ','.join(data['stack'])
    data['preferred_orders'] = ','.join(data['preferred_orders'])

    data_str = json.dumps(data)

    kb = k.admin_conf(user_id=user_id)
    await bot.send_message(chat_id=admin, text=text, reply_markup=kb)

    text = f'<b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ</b>'
    await call.message.answer(text=text)

    await r.add_request(user_id=user_id, data=data_str)
    
    await state.clear()



# --------------------------------

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞" –≤ –∫–∞–∂–¥–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏

@router.callback_query(k.Menu_callback.filter(F.menu == 'cancel'), Form.rules)
async def cancel_nickname(call: CallbackQuery, state: FSMContext):

    await call.message.delete()

    text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –í–∞—à –Ω–∏–∫–Ω–µ–π–º (—Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã, –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ü–∏—Ñ—Ä):"
    photo = FSInputFile(f'photos/{photo_nickname}')

    await call.message.answer_photo(photo=photo, caption=text)
    await state.set_state(Form.nickname)



@router.callback_query(k.Menu_callback.filter(F.menu == 'cancel'), Form.role)
async def cancel_rules(call: CallbackQuery, state: FSMContext):

    await call.message.delete()

    text = """
<b>üõ° –ü—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –≤ —Å—Ç—É–¥–∏–∏, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω—ã —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏ —Å–æ–≥–ª–∞—Å–Ω—ã —Å –Ω–∏–º–∏.</b>
"""
    kb = k.rules_kb()
    photo = FSInputFile(f'photos/{photo_rules}')

    await call.message.answer_photo(photo=photo, caption=text, reply_markup=kb)

    await state.set_state(Form.rules)



@router.callback_query(k.Menu_callback.filter(F.menu == 'cancel'), Form.stack)
async def cancel_stack(call: CallbackQuery, state: FSMContext):

    await call.message.delete()

    await state.update_data(selected_technologies=[])
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –í–∞—à—É —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é:"

    kb = k.role_kb()
    photo = FSInputFile(f'photos/{photo_role}')

    await call.message.answer_photo(photo=photo, caption=text, reply_markup=kb)

    await state.set_state(Form.role)



@router.callback_query(k.Menu_callback.filter(F.menu == 'cancel'), Form.preferences)
async def cancel_stack(call: CallbackQuery, state: FSMContext):

    await call.message.delete()

    text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –í–∞—à —Å—Ç–µ–∫:"
    await state.update_data(selected_technologies=[])
    
    role = (await state.get_data()).get('role')

    if role == 'developer':
        kb = k.stack_kb()
    elif role == 'designer':
        kb = k.stack_kb_designer()

    photo = FSInputFile(f'photos/{photo_stack}')

    await call.message.answer_photo(photo=photo, caption=text, reply_markup=kb)

    await state.set_state(Form.stack)



@router.callback_query(k.Menu_callback.filter(F.menu == 'cancel'), Form.portfolie)
async def cancel_preferences(call: CallbackQuery, state: FSMContext):

    await call.message.delete()

    await state.update_data(selected_sizes=[])

    text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–∫–∞–∑—ã:"
    kb = k.order_size_kb()
    photo = FSInputFile(f'photos/{photo_preferences}')

    await call.message.answer_photo(photo=photo, caption=text, reply_markup=kb)

    await state.set_state(Form.preferences)