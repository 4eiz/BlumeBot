import os
from dotenv import load_dotenv

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters.callback_data import CallbackData
from typing import Optional




class Menu_callback(CallbackData, prefix="menu"):
    menu: str
    data: Optional[str] = None

class Answer_callback(CallbackData, prefix="answer"):
    answer: str
    user_id: int
    rank: Optional[str] = None


class Accept_callback(CallbackData, prefix="answer"):
    menu: str


rules_url = os.getenv("rules_url")





def order_size_kb(selected_sizes=None):

    if selected_sizes is None:
        selected_sizes = set()

    order_sizes = {
    '–ú–µ–ª–∫–∏–µ': 'small',
    '–°—Ä–µ–¥–Ω–∏–µ': 'medium',
    '–ë–æ–ª—å—à–∏–µ': 'large'
    }
 
    kb = []
    
    for size, code in order_sizes.items():
        text = f'{size} ‚úÖ' if code in selected_sizes else size
        kb.append([
            InlineKeyboardButton(
                text=text, 
                callback_data=Menu_callback(menu='order_size', data=code).pack()
            )
        ])

    kb.append(
        [InlineKeyboardButton(
            text='üöÄ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', 
            callback_data=Menu_callback(menu='next').pack()
        )],
    )
    kb.append(
        [InlineKeyboardButton(
            text='‚óÄÔ∏è –ù–∞–∑–∞–¥', 
            callback_data=Menu_callback(menu='cancel').pack()
        )],
    )


    return InlineKeyboardMarkup(inline_keyboard=kb)



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å—Ç–µ–∫–∞ –¥–ª—è –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤
def stack_kb_designer(selected_technologies=[]):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π —Å —á–µ–∫–±–æ–∫—Å–∞–º–∏ –¥–ª—è –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤.
    :param selected_technologies: –°–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π.
    :return: InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å".
    """
    technologies = ['GFX', 'UI/UX', 'Web', 'Motion', '3D']

    kb = []

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ 3 –≤ —Ä—è–¥
    for i in range(0, len(technologies), 3):
        row = []
        for tech in technologies[i:i + 3]:
            emoji = "‚úÖ" if tech in selected_technologies else ""
            row.append(
                InlineKeyboardButton(
                    text=f"{tech} {emoji}",
                    callback_data=Menu_callback(menu='tech', data=tech).pack()
                )
            )
        kb.append(row)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" –≤ –∫–æ–Ω–µ—Ü
    kb.append([
        InlineKeyboardButton(
            text='üöÄ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å',
            callback_data=Menu_callback(menu='next').pack()
        )],
    )
    kb.append(
        [InlineKeyboardButton(
            text='‚óÄÔ∏è –ù–∞–∑–∞–¥', 
            callback_data=Menu_callback(menu='cancel').pack()
        )],
    )

    return InlineKeyboardMarkup(inline_keyboard=kb)



def stack_kb(selected_technologies=[]):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π —Å —á–µ–∫–±–æ–∫—Å–∞–º–∏.
    :param selected_technologies: –°–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π.
    :return: InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å".
    """
    technologies = [
        'JavaScript', 'TypeScript', 'Python', 'Java', 'C#', 'C++', 
        'PHP', 'Go (Golang)', 'Kotlin', 'Swift', 'Ruby', 'SQL', 
        'Node.js', 'React.js', 'Vue.js', 'Angular', 'Django', 
        'Flask', 'GraphQL', 'Docker', 'AioGram', 'Requests', 'FastAPI'
    ]

    kb = []

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ 3 –≤ —Ä—è–¥
    for i in range(0, len(technologies), 3):
        row = []
        for tech in technologies[i:i + 3]:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤—ã–±—Ä–∞–Ω–∞ –ª–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è
            emoji = "‚úÖ" if tech in selected_technologies else ""
            row.append(
                InlineKeyboardButton(
                    text=f"{tech} {emoji}",
                    callback_data=Menu_callback(menu='tech', data=tech).pack()
                )
            )
        kb.append(row)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" –≤ –∫–æ–Ω–µ—Ü
    kb.append([
        InlineKeyboardButton(
            text='üöÄ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', 
            callback_data=Menu_callback(menu='next').pack()
        )]
    )
    kb.append(
        [InlineKeyboardButton(
            text='‚óÄÔ∏è –ù–∞–∑–∞–¥', 
            callback_data=Menu_callback(menu='cancel').pack()
        )],
    )

    return InlineKeyboardMarkup(inline_keyboard=kb)


def rules_kb():
    kb = [
        [
            InlineKeyboardButton(text='üìô –ü—Ä–∞–≤–∏–ª–∞', url=rules_url),
        ],
        [
            InlineKeyboardButton(text='‚úÖ –Ø –ø—Ä–æ—á–∏—Ç–∞–ª, –¥–∞–ª–µ–µ', callback_data=Menu_callback(menu='accept_rules').pack()),
        ],
        [
            InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data=Menu_callback(menu='cancel').pack()),
        ],
    ]

    return InlineKeyboardMarkup(inline_keyboard=kb)


def menu_kb():
    kb = [
        [
            InlineKeyboardButton(text='üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data=Menu_callback(menu='menu').pack()),
        ],
    ]

    return InlineKeyboardMarkup(inline_keyboard=kb)


# def rules_kb():
#     kb = [
#         [
#             InlineKeyboardButton(text='–Ø –ø—Ä–æ—á–∏—Ç–∞–ª', callback_data=Menu_callback(menu='accept_rules').pack()),
#         ],
#         [
#             InlineKeyboardButton(text='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data=Menu_callback(menu='next').pack()),
#         ],
#         [
#             InlineKeyboardButton(
#             text='–ù–∞–∑–∞–¥', 
#             callback_data=Menu_callback(menu='cancel').pack()
#         )],
#     ]

#     return InlineKeyboardMarkup(inline_keyboard=kb)


# def rules_accepted_kb():
#     kb = [
#         [
#             InlineKeyboardButton(text='–Ø –ø—Ä–æ—á–∏—Ç–∞–ª ‚úÖ', callback_data=Menu_callback(menu='accepted').pack()),
#         ],
#         [
#             InlineKeyboardButton(text='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data=Menu_callback(menu='next').pack()),
#         ],
#         [InlineKeyboardButton(
#             text='–ù–∞–∑–∞–¥ ‚óÄÔ∏è', 
#             callback_data=Menu_callback(menu='cancel').pack()
#         )],
#     ]

#     return InlineKeyboardMarkup(inline_keyboard=kb)


def role_kb():
    kb = [
        [
            InlineKeyboardButton(text='üé® –î–∏–∑–∞–π–Ω–µ—Ä', callback_data=Menu_callback(menu='role', data='designer').pack()),
        ],
        [
            InlineKeyboardButton(text='üíª –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', callback_data=Menu_callback(menu='role', data='developer').pack()),
        ],
        [
            InlineKeyboardButton(text='üë®üèª‚Äçüíª –ú–µ–Ω–µ–¥–∂–µ—Ä', callback_data=Menu_callback(menu='role', data='manager').pack()),
        ],
        [
            InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data=Menu_callback(menu='cancel').pack()),
        ],
    ]

    return InlineKeyboardMarkup(inline_keyboard=kb)



def cancel_kb():
    kb = [
        [
            InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data=Menu_callback(menu="cancel").pack())
        ],
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb)


def port_kb():
    kb = [
        [
            InlineKeyboardButton(text='‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ', callback_data=Menu_callback(menu='no').pack()),
        ],
        [
            InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data=Menu_callback(menu="cancel").pack()),
        ],
    ]

    return InlineKeyboardMarkup(inline_keyboard=kb)


def conf_kb():
    kb = [
        [
            InlineKeyboardButton(text='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data=Menu_callback(menu='confirmation').pack()),
        ],
        [
            InlineKeyboardButton(text='‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å', callback_data=Menu_callback(menu="change").pack()),
        ],
    ]

    return InlineKeyboardMarkup(inline_keyboard=kb)


def admin_conf(user_id):

    kb = []
    ranks = {
        'ü§µüèª –†–∞–±–æ—Ç–Ω–∏–∫': 'member',
        'üë®üèª‚Äçüíª –ê–¥–º–∏–Ω': 'admin'
    }

    for name, code in ranks.items():
        button = [
            InlineKeyboardButton(text=name, callback_data=Answer_callback(answer="accept", user_id=user_id, rank=code).pack())
        ]
        kb.append(button)

    button = [
        InlineKeyboardButton(text='‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data=Answer_callback(answer="decline", user_id=user_id).pack())
    ]
    kb.append(button)

    return InlineKeyboardMarkup(inline_keyboard=kb)


def accept():
    kb = [
        [
            InlineKeyboardButton(text='‚úÖ –ü—Ä–∏–Ω—è—Ç–æ', callback_data=Menu_callback(menu="accepted").pack())
        ],
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb)


def decline():
    kb = [
        [
            InlineKeyboardButton(text='‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ', callback_data=Menu_callback(menu="declined").pack())
        ],
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb)