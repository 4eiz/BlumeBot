import os
from dotenv import load_dotenv

from aiogram import Router
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, FSInputFile
from aiogram.fsm.context import FSMContext

from keyboards import client as k
from data import users as u
from data import whitelist as w
from data import orders as o

from app.fsm import Decline_order

from config import bot


router = Router()



load_dotenv()
photo_order = os.getenv("photo_order")




# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ 
@router.callback_query(k.Menu_callback.filter(F.menu == 'active_orders'))
async def active_ords(call: CallbackQuery, callback_data: k.Menu_callback, state: FSMContext):
    
    user_id = call.from_user.id
    whitelist_status = await w.is_in_whitelist(user_id=user_id)
    if not whitelist_status:
        return
    
    await call.message.delete()

    orders = await o.get_active_orders_for_user(user_id=user_id)
    kb = k.active_orders_kb(orders=orders)
    text = '<b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã:</b>'

    await call.message.answer(text=text, reply_markup=kb)



# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ 
@router.callback_query(k.Menu_callback.filter(F.menu == 'active_order'))
async def active_ord(call: CallbackQuery, callback_data: k.Menu_callback, state: FSMContext):
    
    user_id = call.from_user.id
    whitelist_status = await w.is_in_whitelist(user_id=user_id)
    if not whitelist_status:
        return

    await call.message.delete()

    order_id = int(callback_data.data)
    order_data = await o.get_order_by_id(order_id=order_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–∫–∞–∑
    if order_data:
        # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        title = order_data["title"]
        description = order_data["description"]
        required_skills = order_data["required_skills"]
        size = order_data["size"]
        price = order_data["price"]
        deadline = order_data["deadline"]
        status = order_data["status"]
        created_at = order_data["created_at"]
        created_by = order_data["created_by"]

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        text = f"<b>‚ö°Ô∏è –ó–∞–∫–∞–∑</b> <code>#{order_id}</code>\n\n" \
               f"<b>–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:</b> {title}\n\n" \
               f"<b>–ë–æ–ª—å—à–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n\n" \
               f"<b>üí∏ –°—É–º–º–∞:</b> <code>{'-' if price is None else f'${price}'}</code>\n" \
               f"<b>üìÜ –°—Ä–æ–∫–∏:</b> <code>{'-' if deadline is None else deadline}</code>"

        # –ó–¥–µ—Å—å photo –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–º—è —Ñ–∞–π–ª–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        # photo = FSInputFile(f'photos/{orders_photo}')
        kb = k.order_profile_kb(admin_id=created_by, order_id=order_id)

        photo = FSInputFile(f'photos/{photo_order}')
        await call.message.answer_photo(photo=photo, caption=text, reply_markup=kb)
    else:
        await call.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)



@router.callback_query(k.Message_callback.filter(F.menu == 'decline_active_order'))
async def decline_order(call: CallbackQuery, callback_data: k.Message_callback, state: FSMContext):

    await call.message.delete()

    order_id = int(callback_data.order_id)
    admin_id = int(callback_data.user_id)
    await state.update_data(order_id=order_id, admin_id=admin_id)
    # await o.reject_order_assignment(order_id=order_id, user_id=user_id)
    # await o.update_order_status(order_id=order_id, new_status='open')

    text = '<b>–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞:</b>'

    await call.message.answer(text=text)

    await state.set_state(Decline_order.reason)



@router.message(Decline_order.reason)
async def decline_order_reason(message: Message, state: FSMContext):

    try:
        reason = message.text
    except:
        text = '<b>‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É —Ç–µ–∫—Å—Ç–æ–º</b>'
        await message.answer(text=text)
        return

    data = await state.get_data()
    order_id = data['order_id']
    admin_id = data['admin_id']
    user_id = message.from_user.id
    user_name = message.from_user.username

    order_data = await o.get_order_by_id(order_id=order_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–∫–∞–∑
    if order_data:
        # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        title = order_data["title"]
        description = order_data["description"]
        required_skills = order_data["required_skills"]
        size = order_data["size"]
        price = order_data["price"]
        deadline = order_data["deadline"]
        status = order_data["status"]
        created_at = order_data["created_at"]
        created_by = order_data["created_by"]

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        if user_name is not None:
            text = f"<b>‚õî –û–¢–ö–ê–ó –û–¢ –ó–ê–ö–ê–ó–ê</b>\n\n\n" \
                f"<b>üë§ –Æ–∑–µ—Ä</b> @{user_name} (<code>#{user_id}</code>)\n" \
                f"<b>‚ö°Ô∏è –ó–∞–∫–∞–∑</b> <code>#{order_id}</code>\n\n" \
                f"<b>üí¨ –ü—Ä–∏—á–∏–Ω–∞:</b> {reason}\n\n" \
                f"<b>üí∏ –°—É–º–º–∞:</b> <code>{'-' if price is None else f'${price}'}</code>\n" \
                f"<b>üìÜ –°—Ä–æ–∫–∏:</b> <code>{'-' if deadline is None else deadline}</code>"
            
        else:
            text = f"<b>‚õî –û–¢–ö–ê–ó –û–¢ –ó–ê–ö–ê–ó–ê</b>\n\n\n" \
                f"<b>üë§ –Æ–∑–µ—Ä</b> <code>#{user_id}</code>\n" \
                f"<b>‚ö°Ô∏è –ó–∞–∫–∞–∑</b> <code>#{order_id}</code>\n\n" \
                f"<b>üí¨ –ü—Ä–∏—á–∏–Ω–∞:</b> {reason}\n\n" \
                f"<b>üí∏ –°—É–º–º–∞:</b> <code>{'-' if price is None else f'${price}'}</code>\n" \
                f"<b>üìÜ –°—Ä–æ–∫–∏:</b> <code>{'-' if deadline is None else deadline}</code>"
            
        
        
    kb = k.decline_order_kb(user_id=user_id, order_id=order_id)
    await bot.send_message(chat_id=admin_id, text=text, reply_markup=kb)

    text = f'<b>–ó–∞—è–≤–∫–∞ –Ω–∞ –æ—Ç–∫–∞–∑ –æ—Ç –∑–∞–∫–∞–∑–∞ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!</b>'
    kb = k.cancel_menu_kb()
    await message.answer(text=text, reply_markup=kb)

    await state.clear()



@router.callback_query(k.Message_callback.filter(F.menu == 'accept_request'))
async def accept_request(call: CallbackQuery, callback_data: k.Message_callback, state: FSMContext):

    order_id = int(callback_data.order_id)
    user_id = int(callback_data.user_id)

    text = f'<b>–ó–∞—è–≤–∫–∞ –Ω–∞ –æ—Ç–∫–∞–∑ –æ—Ç –∑–∞–∫–∞–∑–∞ <code>#{order_id}</code> –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞</b>'
    await bot.send_message(chat_id=user_id, text=text)
    
    await o.reject_order_assignment(order_id=order_id, user_id=user_id)
    await o.set_order_status_open(order_id=order_id)

    kb = k.declined_kb()
    await call.message.edit_reply_markup(reply_markup=kb)


@router.callback_query(k.Message_callback.filter(F.menu == 'decline_request'))
async def decline_request(call: CallbackQuery, callback_data: k.Message_callback, state: FSMContext):

    kb = k.declined_kb()
    await call.message.edit_reply_markup(reply_markup=kb)

    order_id = int(callback_data.order_id)
    user_id = int(callback_data.user_id)

    text = f'<b>–ó–∞—è–≤–∫–∞ –Ω–∞ –æ—Ç–∫–∞–∑ –æ—Ç –∑–∞–∫–∞–∑–∞ <code>#{order_id}</code> –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω</b>'
    await bot.send_message(chat_id=user_id, text=text)