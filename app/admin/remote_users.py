import os
from dotenv import load_dotenv

from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command, CommandObject
from aiogram import Router, F
from aiogram.types import CallbackQuery, FSInputFile
from aiogram.fsm.context import FSMContext

from keyboards import client as k
from data import users as u
from data import whitelist as w
from data import orders as o

from config import bot



router = Router()

load_dotenv()
admin = int(os.getenv("admin"))
photo_users = os.getenv("photo_users")
photo_stats = os.getenv("photo_stats")





@router.callback_query(k.Menu_callback.filter(F.menu == 'users'))
async def get_orders(call: CallbackQuery, callback_data: k.Menu_callback, state: FSMContext):
    
    await call.message.delete()

    user_id = call.from_user.id

    whitelist_status = await w.is_in_whitelist(user_id=user_id)
    if not whitelist_status:
        return
    
    response = await u.is_admin(user_id=user_id)
    if not response:
        return
    
    text = '<b>–°–ø–∏—Å–æ–∫ —é–∑–µ—Ä–æ–≤:</b>'
    photo = FSInputFile(f'photos/{photo_users}')
    users_list = await u.get_users_by_role(requester_id=user_id)
    kb = k.users_kb(users_list)

    await call.message.answer_photo(photo=photo, caption=text, reply_markup=kb)




@router.callback_query(k.Menu_callback.filter(F.menu == 'user'))
async def get_orders(call: CallbackQuery, callback_data: k.Menu_callback, state: FSMContext):
    
    await call.message.delete()

    user_id = call.from_user.id

    whitelist_status = await w.is_in_whitelist(user_id=user_id)
    if not whitelist_status:
        return
    
    response = await u.is_admin(user_id=user_id)
    if not response:
        return


    user_info_id = int(callback_data.data)
    stats = await u.get_user_statistics(user_id=user_info_id)

    warns = stats['warnings']
    if stats['warnings'] is None:
        warns = 0

    text = (
        f"<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —é–∑–µ—Ä–∞ <code>{stats['username']}</code> | <code>{user_info_id}</code>:</b>\n\n"
        f"<b>–î–∞—Ç–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:</b> <code>{stats['joined_at']}</code>\n"
        f"<b>–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–µ–Ω–µ–≥:</b> <code>${stats['total_earnings']}</code>\n"
        f"<b>–í—ã–≥–æ–≤–æ—Ä—ã:</b> <code>{warns}</code>\n\n"
        f"<b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã:</b> <code>{stats['active_orders_count']}</code>\n"
        f"<b>–û—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã:</b> <code>{stats['rejected_orders_count']}</code>\n"
    )

    orders = await o.get_active_orders_for_user(user_id=user_info_id)
    
    if admin == user_id:
        admin_status = True
    else:
        admin_status = False

    kb = k.user_kb(orders=orders, user_id=user_info_id, admin_status=admin_status)
    photo = FSInputFile(f'photos/{photo_stats}')

    await call.message.answer_photo(photo=photo, caption=text, reply_markup=kb)





@router.callback_query(k.Menu_callback.filter(F.menu == 'admin_order'))
async def end_order(call: CallbackQuery, callback_data: k.Menu_callback, state: FSMContext):

    await call.message.delete()

    order_id = int(callback_data.data)
    order_data = await o.get_order_by_id(order_id=order_id)
    user_id = await o.get_user_by_order(order_id=order_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–∫–∞–∑
    if order_data:
        # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        title = order_data["title"]
        description = order_data["description"]
        required_skills = order_data["required_skills"]
        size = order_data["size"]
        price = order_data["price"]
        deadline = order_data["deadline"]
        status = order_data["status"]
        created_at = order_data["created_at"]
        created_by = order_data["created_by"]

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        text = f"<b>‚ö°Ô∏è –ó–∞–∫–∞–∑</b> <code>#{order_id}</code>\n\n" \
               f"<b>–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:</b> {title}\n\n" \
               f"<b>–ë–æ–ª—å—à–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n\n" \
               f"<b>üí∏ –°—É–º–º–∞:</b> <code>{'-' if price is None else f'${price}'}</code>\n" \
               f"<b>üìÜ –°—Ä–æ–∫–∏:</b> <code>{'-' if deadline is None else deadline}</code>"

        # –ó–¥–µ—Å—å photo –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–º—è —Ñ–∞–π–ª–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        # photo = FSInputFile(f'photos/{orders_photo}')
    kb = k.order_admin_kb(order_id=order_id, user_id=user_id)

    await call.message.answer(text=text, reply_markup=kb)




@router.callback_query(k.Menu_callback.filter(F.menu == 'comlete_order'))
async def end_order(call: CallbackQuery, callback_data: k.Menu_callback, state: FSMContext):

    await call.message.delete()

    order_id = int(callback_data.data)
    user_id = int(callback_data.data2)


    status = await o.complete_order(order_id=order_id)
    if status:
        text = f'<b>–ó–∞–∫–∞–∑ —Å –∞–π–¥–∏ <code>#{order_id}</code> —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω!</b>'
    else:
        text = f'<b>–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ —Å –∞–π–¥–∏ <code>#{order_id}</code>!</b>'

    # –ó–¥–µ—Å—å photo –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–º—è —Ñ–∞–π–ª–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    # photo = FSInputFile(f'photos/{orders_photo}')
    kb = k.cancel_menu_kb()
    await call.message.answer(text=text, reply_markup=kb)

    text = f'<b>‚≠êÔ∏è –ó–∞–∫–∞–∑ <code>#{order_id}</code> –∑–∞–≤–µ—Ä—à–µ–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–±–æ—Ç—É!</b>'
    await bot.send_message(chat_id=user_id, text=text)



@router.callback_query(k.Menu_callback.filter(F.menu == 'rejected_order'))
async def end_order(call: CallbackQuery, callback_data: k.Menu_callback, state: FSMContext):

    await call.message.delete()

    order_id = int(callback_data.data)
    user_id = int(callback_data.data2)


    status = await o.reject_order(order_id=order_id)
    if status:
        text = f'<b>–ó–∞–∫–∞–∑ —Å –∞–π–¥–∏ <code>#{order_id}</code> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!</b>'
    else:
        text = f'<b>–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ —Å –∞–π–¥–∏ <code>#{order_id}</code>!</b>'

    # –ó–¥–µ—Å—å photo –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–º—è —Ñ–∞–π–ª–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    # photo = FSInputFile(f'photos/{orders_photo}')
    kb = k.cancel_menu_kb()
    await call.message.answer(text=text, reply_markup=kb)

    text = f'<b>‚ôªÔ∏è –ó–∞–∫–∞–∑ <code>#{order_id}</code> —É–¥–∞–ª—ë–Ω.</b>'
    await bot.send_message(chat_id=user_id, text=text)





@router.callback_query(k.Menu_callback.filter(F.menu == 'add_warn'))
async def end_order(call: CallbackQuery, callback_data: k.Menu_callback, state: FSMContext):

    await call.message.delete()

    user_id = int(callback_data.data)

    status = await u.add_warning(user_id=user_id)
    # print(status)
    if status:
        text = f'–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ {user_id} —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–æ'
    else:
        text = f'–û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è {user_id}!'

    await call.answer(text=text)


    user_info_id = int(callback_data.data)
    stats = await u.get_user_statistics(user_id=user_info_id)

    warns = stats['warnings']
    if stats['warnings'] is None:
        warns = 0

    text = (
        f"<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —é–∑–µ—Ä–∞ <code>{stats['username']}</code> | <code>{user_info_id}</code>:</b>\n\n"
        f"<b>–î–∞—Ç–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:</b> <code>{stats['joined_at']}</code>\n"
        f"<b>–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–µ–Ω–µ–≥:</b> <code>${stats['total_earnings']}</code>\n"
        f"<b>–í—ã–≥–æ–≤–æ—Ä—ã:</b> <code>{warns}</code>\n\n"
        f"<b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã:</b> <code>{stats['active_orders_count']}</code>\n"
        f"<b>–û—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã:</b> <code>{stats['rejected_orders_count']}</code>\n"
    )

    orders = await o.get_active_orders_for_user(user_id=user_info_id)
    
    id_from_user = call.from_user.id

    if admin == id_from_user:
        admin_status = True
    else:
        admin_status = False

    # print(text)
    kb = k.user_kb(orders=orders, user_id=user_info_id, admin_status=admin_status)
    photo = FSInputFile(f'photos/{photo_stats}')

    await call.message.answer_photo(photo=photo, caption=text, reply_markup=kb)


@router.callback_query(k.Menu_callback.filter(F.menu == 'remove_warn'))
async def end_order(call: CallbackQuery, callback_data: k.Menu_callback, state: FSMContext):

    await call.message.delete()

    user_id = int(callback_data.data)

    status = await u.remove_warning(user_id=user_id)
    if status:
        text = f'–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ {user_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!'
    else:
        text = f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è {user_id}!'

    await call.answer(text=text)


    user_id = int(callback_data.data)
    stats = await u.get_user_statistics(user_id=user_id)

    warns = stats['warnings']
    if stats['warnings'] is None:
        warns = 0

    text = (
        f"<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —é–∑–µ—Ä–∞ <code>{stats['username']}</code> | <code>{user_id}</code>:</b>\n\n"
        f"<b>–î–∞—Ç–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:</b> <code>{stats['joined_at']}</code>\n"
        f"<b>–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–µ–Ω–µ–≥:</b> <code>${stats['total_earnings']}</code>\n"
        f"<b>–í—ã–≥–æ–≤–æ—Ä—ã:</b> <code>{warns}</code>\n\n"
        f"<b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã:</b> <code>{stats['active_orders_count']}</code>\n"
        f"<b>–û—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã:</b> <code>{stats['rejected_orders_count']}</code>\n"
    )

    orders = await o.get_active_orders_for_user(user_id=user_id)
    
    id_from_user = call.from_user.id

    if admin == id_from_user:
        admin_status = True
    else:
        admin_status = False

    kb = k.user_kb(orders=orders, user_id=user_id, admin_status=admin_status)

    photo = FSInputFile(f'photos/{photo_stats}')
    await call.message.answer_photo(photo=photo, caption=text, reply_markup=kb)